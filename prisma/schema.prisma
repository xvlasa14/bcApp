// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  login       String    
  password    String
  persona     Doctor?
}

model Doctor {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  name      String
  surname   String

  user      User      @relation(fields: [userId], references: [id]) 
  userId    Int       @unique

  patients  Patient[]
}

model Norm {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  rangeLeft   Int
  rangeRight  Int
  deviation   Float
  median      Int

  partId   Int
  part     Part         @relation(fields: [partId], references: [id])
          
}

model Test {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  name      String
  category  String?

  parts     Part[]
  exams     Exam[]
  results   Result[]
}

model Part {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  title     String

  norms     Norm[]

  testId    Int 
  test      Test        @relation(fields: [testId], references: [id])
        

  partId Int?
  part   Part?          @relation("Subtest", fields: [partId], references: [id])
  parts  Part[]         @relation("Subtest")

  results   Result[]
}



model Exam {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  date      DateTime  @db.Date()


  test      Test      @relation(fields: [testId], references: [id])
  testId    Int


  patient   Patient   @relation(fields: [patientId], references: [id])
  patientId Int
  results   Result[]
}

model Result {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  test  Test @relation(fields: [testId], references: [id])
  testId  Int   

  part   Part?         @relation(fields: [partId], references: [id])
  partId Int?

  exam      Exam?      @relation(fields: [examId], references: [id])
  examId    Int?

  result     Int
}



model Patient {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  birthday  DateTime
  sex       String
  education String?

  doctor    Doctor    @relation(fields: [doctorId], references: [id])
  doctorId  Int       

  exams     Exam[]
  records   Record[]
}

model Record {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  description String

  patient     Patient     @relation(fields: [patientId], references: [id])
  patientId   Int         

  diagnosis   Diagnosis   @relation(fields: [diagnosisId], references: [id])
  diagnosisId Int         
}

model Diagnosis {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  name        String?
  code        String

  records     Record[] 
}

